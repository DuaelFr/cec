<?php
/**
 * @file
 * Code for the Personnages feature.
 */

include_once 'personnages.features.inc';

/**
 * Implements hook_permission().
 */
function personnages_permission() {
  return array(
    'view all playable characters' => array(
      'title' => t('View all playable character sheets without being restricted.'),
    ),
    'view all non-playable characters' => array(
      'title' => t('View all non-playable character sheets without being restricted.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function personnages_node_access($node, $op, $account) {
  global $user;
  $return = NODE_ACCESS_IGNORE;

  if ($op == 'view' && $node->type == 'character') {
    $return = NODE_ACCESS_DENY;
    $type = reset(field_get_items('node', $node, 'field_character_type'));
    if ($type['value'] == 'Joueur') {
      $incarnate = field_get_items('node', $node, 'field_incarnate');
      if (!empty($incarnate)) {
        $incarnate = reset($incarnate);
        if (user_access('view all playable characters') || $user->uid == $incarnate['target_id']) {
          $return = NODE_ACCESS_ALLOW;
        }
      }
    }
    elseif ($type['value'] == 'PNJ' && user_access('view all non-playable characters')) {
      $return = NODE_ACCESS_ALLOW;
    }
  }

  return $return;
}

/**
 * Implements hook_menu().
 */
function personnages_menu() {
  $menu = array(
    'node/%node/zpreview/standard' => array(
      'page callback' => 'node_page_view',
      'page arguments' => array(1),
      'access callback' => 'personnages_zpreview_access',
      'access arguments' => array(1),
      'title' => 'Vue joueur',
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
  );
  $menu['node/%node/zpreview/full'] = $menu['node/%node/zpreview/standard'];
  $menu['node/%node/zpreview/full']['title'] .= ' complète';
  return $menu;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Rename default tab for zorgas.
 */
function personnages_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (!empty($data['tabs'])) {
    foreach ($data['tabs'][0]['output'] as $k => $v) {
      if ($v['#link']['title'] == 'Vue joueur') {
        $data['tabs'][0]['output'][0]['#link']['title'] = 'Vue orga';
        break;
      }
    }
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function personnages_zpreview_access($node) {
  $allowed = array('character', 'group');
  if (!in_array($node->type, $allowed)) {
    return FALSE;
  }
  return user_access('view all playable characters');
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function personnages_entity_view_mode_alter(&$view_mode, $context) {
  $allowed = array('character', 'group');
  if ($context['entity_type'] == 'node' && in_array($context['entity']->type, $allowed) && arg(2) == 'zpreview') {
    $view_mode = 'full';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function personnages_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_view_mode_alter') {
    $group = $implementations['personnages'];
    unset($implementations['personnages']);
    $implementations['personnages'] = $group;
  }
}

/**
 * Implements hook_comment_insert().
 */
function personnages_comment_insert($comment) {
  if ($comment->node_type == 'comment_node_character') {
    $node = node_load($comment->nid);
    $wrapper = entity_metadata_wrapper('node', $node);
    if ($wrapper->field_incarnate->uid->value() != $comment->uid) {
      $to = $wrapper->field_incarnate->mail->value();
      $lang = language_default();
      $params = array(
        'char' => $wrapper->title->value(),
        'url' => url('node/' . $comment->nid, array('absolute' => TRUE, 'fragment' => 'comment-' . $comment->cid)),
      );
      $mail = drupal_mail('personnages', 'new_comment', $to, $lang, $params);
      if (empty($mail['result'])) {
        watchdog('mail', 'Unable to send mail to ' . $to);
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function personnages_mail($key, &$message, $params) {
  if ($key == 'new_comment') {
    $message['subject'] .= '[GNCEC] Commentaire sur ton perso ' . $params['char'];
    $message['body'][] = 'Un commentaire vient d\'être déposé sur <a href="' . $params['url'] . '">ton personnage</a>.<br />
<br />
Ludiquement,<br />
Les Zorgas';
  }
}

// -----------------------------------------------------------------------------
// EXTRA FIELDS

/**
 * Implements hook_field_extra_fields().
 */
function personnages_field_extra_fields() {
  $extras = array();

  $extras['node']['character']['display']['view_events_zorga'] = array(
    'label' => t('Views events Zorga'),
    'weight' => 99,
  );
  $extras['node']['character']['display']['view_events_player'] = array(
    'label' => t('Views events Player'),
    'weight' => 99,
  );

  $extras['node']['character']['display']['view_infos_zorga'] = array(
    'label' => t('Views infos Zorga'),
    'weight' => 99,
  );
  $extras['node']['character']['display']['view_infos_player'] = array(
    'label' => t('Views infos Player'),
    'weight' => 99,
  );

  $extras['node']['character']['display']['view_sequences_zorga'] = array(
    'label' => t('Views sequences Zorga'),
    'weight' => 99,
  );

  $extras['node']['character']['display']['view_avantages_player'] = array(
    'label' => t('Views avantages Player'),
    'weight' => 99,
  );

  $extras['node']['character']['display']['view_groupes_zorga'] = array(
    'label' => t('Views groupes Zorga'),
    'weight' => 99,
  );
  $extras['node']['character']['display']['view_groupes_player'] = array(
    'label' => t('Views groupes Player'),
    'weight' => 99,
  );

  $extras['node']['character']['display']['zorgas_links'] = array(
    'label' => t('Zorgas Links'),
    'weight' => 99,
  );

  $extras['node']['character']['display']['view_trombi'] = array(
    'label' => t('View trombi'),
    'weight' => 99,
  );

  return $extras;
}

/**
 * Implements hook_node_view().
 */
function personnages_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'character') {
    $settings = field_extra_fields_get_display('node', $node->type, $view_mode);

    // Avoid an unauthorized user to access the page.
    global $user;
    $incarnate = field_get_items('node', $node, 'field_incarnate');
    $type = field_get_items('node', $node, 'field_character_type');
    if ($type[0]['value'] == 'PNJ' && !user_access('view all non-playable characters')) {
      return;
    }
    elseif ($type[0]['value'] == 'Joueur') {
      if (empty($incarnate) || $incarnate[0]['target_id'] != $user->uid) {
        if (!user_access('view all playable characters')) {
          return;
        }
      }
    }

    // Zorga summary views.
    if ($settings['view_events_zorga']['visible']) {
      $view_content = views_embed_view('admin_evenements', 'block_by_character', $node->nid);
      $node->content['view_events_zorga'] = _config_base_extra_field_view('view_events_zorga', 'Evènements liés au personnage', $node, $view_mode, $langcode, $view_content);
    }
    if ($settings['view_infos_zorga']['visible']) {
      $view_content = views_embed_view('admin_informations', 'block_by_character', $node->nid);
      $node->content['view_infos_zorga'] = _config_base_extra_field_view('view_infos_zorga', 'Informations liées au personnage', $node, $view_mode, $langcode, $view_content);
    }
    if ($settings['view_sequences_zorga']['visible']) {
      $view_content = views_embed_view('admin_sequences', 'block_by_character', $node->nid);
      $node->content['view_sequences_zorga'] = _config_base_extra_field_view('view_sequences_zorga', 'Séquences liées au personnage', $node, $view_mode, $langcode, $view_content);
    }
    if ($settings['view_groupes_zorga']['visible']) {
      $view_content = views_embed_view('admin_groupes', 'block_by_character', $node->nid);
      $node->content['view_groupes_zorga'] = _config_base_extra_field_view('view_groupes_zorga', 'Groupes liés au personnage', $node, $view_mode, $langcode, $view_content);
    }
    if ($settings['zorgas_links']['visible']) {
      $view_content = theme('item_list', array(
        'items' => array(
          l('Aperçu vision joueur', 'node/' . $node->nid . '/zpreview'),
          l('Liste complète des événements du personnage', 'admin/cec/evenements/personnage/' . $node->nid),
          l('Liste complète des informations du personnage', 'admin/cec/informations/personnage/' . $node->nid),
          l('Liste complète des sequences du personnage', 'admin/cec/sequences/personnage/' . $node->nid),
        ),
      ));
      $node->content['zorgas_links'] = _config_base_extra_field_view('zorgas_links', 'Liens Zorgas', $node, $view_mode, $langcode, $view_content);
      $node->content['zorgas_links']['#access'] = user_access('view all playable characters');
    }

    // Zorga player-like view.
    if (arg(2) == 'zpreview' && arg(3) == 'full' && user_access('view all playable characters')) {
      if ($settings['view_events_player']['visible']) {
        $view_content = views_embed_view('evenements', 'block_zorgas', $node->nid);
        $node->content['view_events_player'] = _config_base_extra_field_view('view_events_player', '', $node, $view_mode, $langcode, $view_content);
      }
      if ($settings['view_infos_player']['visible']) {
        $view_content = views_embed_view('informations', 'block_zorgas', $node->nid);
        $node->content['view_infos_player'] = _config_base_extra_field_view('view_infos_player', '', $node, $view_mode, $langcode, $view_content);
      }
      if ($settings['view_avantages_player']['visible']) {
        $view_content = views_embed_view('avantages', 'avantages_perso_zorgas', $node->nid);
        $node->content['view_avantages_player'] = _config_base_extra_field_view('view_avantages_player', '', $node, $view_mode, $langcode, $view_content);
      }
      if ($settings['view_groupes_player']['visible']) {
        $view_content = views_embed_view('groups', 'groupes_perso_zorgas', $node->nid);
        $node->content['view_groupes_player'] = _config_base_extra_field_view('view_groupes_player', '', $node, $view_mode, $langcode, $view_content);
      }
      if ($settings['view_trombi']['visible']) {
        $view_content = views_embed_view('characters', 'block_trombi_zorgas', $node->nid);
        $node->content['view_trombi'] = _config_base_extra_field_view('view_trombi', '', $node, $view_mode, $langcode, $view_content);
      }
    }
    // Player view.
    else {
      if ($settings['view_events_player']['visible']) {
        $view_content = views_embed_view('evenements', 'block', $node->nid);
        $node->content['view_events_player'] = _config_base_extra_field_view('view_events_player', '', $node, $view_mode, $langcode, $view_content);
      }
      if ($settings['view_infos_player']['visible']) {
        $view_content = views_embed_view('informations', 'block', $node->nid);
        $node->content['view_infos_player'] = _config_base_extra_field_view('view_infos_player', '', $node, $view_mode, $langcode, $view_content);
      }
      if ($settings['view_avantages_player']['visible']) {
        $view_content = views_embed_view('avantages', 'avantages_perso', $node->nid);
        $node->content['view_avantages_player'] = _config_base_extra_field_view('view_avantages_player', '', $node, $view_mode, $langcode, $view_content);
      }
      if ($settings['view_groupes_player']['visible']) {
        $view_content = views_embed_view('groups', 'groupes_perso', $node->nid);
        $node->content['view_groupes_player'] = _config_base_extra_field_view('view_groupes_player', '', $node, $view_mode, $langcode, $view_content);
      }
      if ($settings['view_trombi']['visible']) {
        $view_content = views_embed_view('characters', 'block_trombi', $node->nid);
        $node->content['view_trombi'] = _config_base_extra_field_view('view_trombi', '', $node, $view_mode, $langcode, $view_content);
      }
    }
  }
}
